#include "PETPrimaryGeneratorAction.hh"
#include "G4Gamma.hh"
#include "G4DynamicParticle.hh"

using namespace CLHEP;

PETPrimaryGeneratorAction::PETPrimaryGeneratorAction()
{
    GateSource = new GateVSource("HotSpot", "backtoback");
    GateSource->SetParticleDefinition(G4Gamma::Definition());

    G4SPSEneDistribution* energy = GateSource->GetEneDist();
    energy->SetEnergyDisType("Mono");
    energy->SetMonoEnergy(0.511*MeV);

    G4SPSPosDistribution* position = GateSource->GetPosDist();
    position->SetPosDisType("Volume");
    position->SetPosDisShape("Sphere");
    position->SetRadius(1*mm);
    position->SetCentreCoords(G4ThreeVector(0*m, 0*m, 0*m));

    G4SPSAngDistribution* angular = GateSource->GetAngDist();
    angular->SetAngDistType("iso");
}

PETPrimaryGeneratorAction::~PETPrimaryGeneratorAction()
{
    delete GateSource;
}

void PETPrimaryGeneratorAction::GeneratePrimaries(G4Event* event)
{
    GateSource->GeneratePrimaryVertex(event);

//    G4DynamicParticle* particle = new G4DynamicParticle;
//    particle->SetProperTime(2*s);

//    //! compute the right number of events per slice at this time
//    G4int eventID = event->GetEventID();
//    GateSourceMgr* sourceMgr = GateSourceMgr::GetInstance();
//    if (eventID==0) {
//      const G4Run* currentRun = GateRunManager::GetRunManager()->GetCurrentRun();
//      //if( currentRun->GetRunID()==0) sourceMgr->Initialization();
//      sourceMgr->PrepareNextRun( currentRun );
//      m_nEvents=0;
//    }

//    G4int numVertices = sourceMgr->PrepareNextEvent(event);
//    //! stop the run if no particle has been generated by the source manager
//    if (numVertices == 0) {
//      GateRunManager* runManager = GateRunManager::GetRunManager();

//      runManager->AbortRun(true);
//      if (m_nVerboseLevel>1) G4cout << "GatePrimaryGeneratorAction::GeneratePrimaries: numVertices == 0, run aborted \n";
//    }
//    else {
//      m_nEvents++;
//      G4PrimaryParticle  * p = event->GetPrimaryVertex(0)->GetPrimary(0);
//  //    if(sourceMgr->GetWeight()>0)  event->GetPrimaryVertex()->SetWeight(sourceMgr->GetWeight());
//       if(sourceMgr->GetWeight()>0)  p->SetWeight(sourceMgr->GetWeight());

//      if (m_nVerboseLevel>0) {
//        if ((m_nEvents%m_printModulo) == 0) {
//      G4cout << "GatePrimaryGeneratorAction::GeneratePrimaries: m_nEvents " << m_nEvents << Gateendl;
//        }
//      }
//    }
}
